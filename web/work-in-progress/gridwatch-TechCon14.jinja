{#Name: Gridwatch TechCon '14#}
{#Desc: Crowd-sourced power outage detection. Demo for TechCon '14.#}

{% extends "base_intro.jinja" %}

{% block includes %}
<script src="/js/jquery.flot.custom-0.8.2.js"></script>
<script src="/bower_components/flot/jquery.flot.time.js"></script>
<script src="/js/jquery.grapher.js"></script>
<script src="/js/gatd_graph.js"></script>

<link rel="stylesheet" href="/css/gatd_graph.css" />
{% endblock %}

{% block title %}
GridWatch TechCon '14
{% endblock %}

{% block page_title %}
GridWatch TechCon '14
{% endblock %}

{% block tagline %}
Community grid monitoring.
{% endblock %}

{% block information %}
<p>
The power grid is one of humanity's most significant engineering undertakings
and is a critical piece of the infrastruacture for modern life. Yet, there is
very little ability for the average person, or even sometimes utilites, to see
into grid health.
</p>
<p>
The GridWatch project is a crowd-sourcing approach to this problem. By installing
a simple, low-impact smartphone app, average users and contribute to the knowledge
of global grid health. In aggregrate, these individual events can provide a reliable,
global-scale view of grid health.
</p>
{% endblock %}

{% block content %}
<style>
.graph_aggregate {
	padding: 100px 5px 0 50px;
	margin: 20px auto 20px auto;
	width:70%;
	height:150px;
}
.graph_all_phones {
	padding: 100px 5px 0 50px;
	margin: 20px auto 20px auto;
	width:70%;
	height:500px;
}
.graph_phone {
	padding: 100px 5px 0 50px;
	margin: 0px auto 0px auto;
	width:70%;
	height:60px;
}
</style>

<div>
	<div id="aggregrate" class="graph_aggregate"></div>
</div>
<!--
<div>
	<div id="all_phones" class="graph_all_phones"></div>
</div>
-->
<div>
	<div id="phone_1" class="graph_phone"></div>
</div>
<div>
	<div id="phone_2" class="graph_phone"></div>
</div>
<div>
	<div id="phone_3" class="graph_phone"></div>
</div>
<div>
	<div id="phone_4" class="graph_phone"></div>
</div>
<div>
	<div id="phone_5" class="graph_phone"></div>
</div>
<div>
	<div id="phone_6" class="graph_phone"></div>
</div>
<div>
	<div id="phone_7" class="graph_phone"></div>
</div>
<div>
	<div id="phone_8" class="graph_phone"></div>
</div>

<script>
// create a map in the "map" div, set the view to a given place and zoom
var map;

var GW_PID = 'HthZRrHnlC';
var GW_CLUSTER_PID = 'jJZ0N2eKmc';
var s;

onload = function() {
	s = io.connect('inductor.eecs.umich.edu:8082/stream');
	s.on('connect', function (data) {
		s.emit('query', {'profile_id': GW_PID, 'time': 600000}
					);
	});

	s2 = io.connect('inductor.eecs.umich.edu:8082/stream');
	s2.on('connect', function (data) {
		s2.emit('query', {'profile_id': GW_CLUSTER_PID, 'time': 600000}
					);
	});

	s2.on('data', function (data) {
			console.log(data);
         data_adj = -2
         if (data['state_bool'] == "unplugged") {
             data_adj = -1
         } else if (data['state_bool'] == "plugged") {
             data_adj = 1
         } else if (data['state_bool'] == "unknown") { 
             data_adj = 0 
         } 

         console.log(data)
         if (data_adj != -2) {
			  add_to_graph(
				agg_graph,
				0,
				data['time'],
				data_adj,
				'black'
				);
		   	agg_graph.update('all');
         }
	});

	agg_graph = $.grapher($("#aggregrate"),
		{legend: {show: false, conainer: $("#graph_raw")},
		 xaxis:  {show:true, width:600000, mode: "time", tickFormatter:x_format},
		 yaxis:  {min:-1, label:"Grid Power", max:1, ticks:1},
		 grid:   {margin: {top: 8, bottom: 20, left: 25, right: 25}},
		});

	s.on('data', function (data) {
			if ((data['phone_id'] < 150) || (data['phone_id'] > 157)) {
				// Phones 150--157 are used in this demo
				return;
			}
			console.log(data);
			data['phone_id'] = data['phone_id'] - 150;

			var state;
			if (data['event_type'] == 'wd') {
				state = phones_power[data['phone_id']];
			} else if (data['event_type'] == 'plugged') {
				phones_power[data['phone_id']] = true;
				state = 1;
			} else if (data['event_type'] == 'unplugged') {
				phones_power[data['phone_id']] = false;
				state = 0;
			} else {
				console.log("WARN: Unknown event_type.");
				console.log(data);
				return;
			}
			var color = get_color(data['phone_id'])
			add_to_graph(
				phones_graphs[data['phone_id']],
				0,
				data['time'],
				state,
				color
				);
			phones_graphs[data['phone_id']].update('all');

			// Add transparent points to each graph to keep time in sync
			for (g in phones_graphs) {
				add_to_graph(
						phones_graphs[g],
						1,
						data['time'],
						0,
						"rgba(255, 255, 255, 0)"
						);
				phones_graphs[g].update('all');
			}
			add_to_graph(agg_graph, 1, data['time'], 0, "rgba(0, 0, 0, 0)");
			agg_graph.update('all');

			/*
			var color = get_color(data['phone_id'])
			add_to_graph(
					all_phones_graph,
					data['phone_id'],
					data['time'],
					state + 1 + 2*data['phone_id'],
					color
					);
			all_phones_graph.update('all');
			*/
	});

	/*
	all_phones_graph = $.grapher($("#all_phones"),
		{legend: {show: false, conainer: $("#graph_raw")},
		 xaxis:  {show:true, width:600000, mode: "time", tickFormatter:x_format},
		 yaxis:  {min:0, label:"Phone State", max:18, ticks:18},
		 grid:   {margin: {top: 8, bottom: 20, left: 25, right: 25}},
		});
	*/

	/* NOTE: I couldn't get flot to center the y-axis label for me, so the labels
	   have non-breaking space characters in them to force them down a little.
	   To insert these in vim: <C-k> <space> <space>
	   Sorry for the hack... */
	p1 = $.grapher($("#phone_1"),
		{legend: {show: false, conainer: $("#graph_raw")},
		 xaxis:  {show:false, width:600000, mode: "time", tickFormatter:x_format},
		 yaxis:  {min:0, label:"P1       ", max:1, ticks:1},
		 grid:   {margin: {top: 8, bottom: 20, left: 25, right: 25}},
		});
	p2 = $.grapher($("#phone_2"),
		{legend: {show: false, conainer: $("#graph_raw")},
		 xaxis:  {show:false, width:600000, mode: "time", tickFormatter:x_format},
		 yaxis:  {min:0, label:"P2       ", max:1, ticks:1},
		 grid:   {margin: {top: 8, bottom: 20, left: 25, right: 25}},
		});
	p3 = $.grapher($("#phone_3"),
		{legend: {show: false, conainer: $("#graph_raw")},
		 xaxis:  {show:false, width:600000, mode: "time", tickFormatter:x_format},
		 yaxis:  {min:0, label:"P3       ", max:1, ticks:1},
		 grid:   {margin: {top: 8, bottom: 20, left: 25, right: 25}},
		});
	p4 = $.grapher($("#phone_4"),
		{legend: {show: false, conainer: $("#graph_raw")},
		 xaxis:  {show:false, width:600000, mode: "time", tickFormatter:x_format},
		 yaxis:  {min:0, label:"P4       ", max:1, ticks:1},
		 grid:   {margin: {top: 8, bottom: 20, left: 25, right: 25}},
		});
	p5 = $.grapher($("#phone_5"),
		{legend: {show: false, conainer: $("#graph_raw")},
		 xaxis:  {show:false, width:600000, mode: "time", tickFormatter:x_format},
		 yaxis:  {min:0, label:"P5       ", max:1, ticks:1},
		 grid:   {margin: {top: 8, bottom: 20, left: 25, right: 25}},
		});
	p6 = $.grapher($("#phone_6"),
		{legend: {show: false, conainer: $("#graph_raw")},
		 xaxis:  {show:false, width:600000, mode: "time", tickFormatter:x_format},
		 yaxis:  {min:0, label:"P6       ", max:1, ticks:1},
		 grid:   {margin: {top: 8, bottom: 20, left: 25, right: 25}},
		});
	p7 = $.grapher($("#phone_7"),
		{legend: {show: false, conainer: $("#graph_raw")},
		 xaxis:  {show:false, width:600000, mode: "time", tickFormatter:x_format},
		 yaxis:  {min:0, label:"P7       ", max:1, ticks:1},
		 grid:   {margin: {top: 8, bottom: 20, left: 25, right: 25}},
		});
	p8 = $.grapher($("#phone_8"),
		{legend: {show: false, conainer: $("#graph_raw")},
		 xaxis:  {show:false, width:600000, mode: "time", tickFormatter:x_format},
		 yaxis:  {min:0, label:"P8       ", max:1, ticks:1},
		 grid:   {margin: {top: 8, bottom: 20, left: 25, right: 25}},
		});
	phones_graphs = [p1, p2, p3, p4, p5, p6, p7, p8];
	phones_power = [true, true, true, true, true, true, true, true];
}


	</script>

{% endblock %}
