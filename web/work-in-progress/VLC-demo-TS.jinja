{#Name: VLC Terraswarm Demo#}
{#Desc: Real-time localization and room reservation using visible light on a floor testbed. Demo for Terraswarm'14.#}

{% extends "base.jinja" %}

{% block includes %}
<script src="/js/gatd_canvas.js"></script>
<script src="/js/gatd_graph.js"></script> {# for get_color #}
{% endblock %}

{% block title %}
VLC Location - Floor Demo
{% endblock %}

{% block page_title %}
VLC Location
{% endblock %}

{% block body %}
<style>
.room {
	text-align: center;
}
</style>
	<div id="body">
		<div>
			<canvas id="grid_canvas_yz" width="768" height="768"
				style="z-index: 1; position:absolute; top:70px; right: 800; left: 0; margin-right: auto; margin-left: auto;"></canvas>
			<canvas id="dots_canvas_yz" width="768" height="768"
				style="z-index: 2; position:absolute; top:70px; right: 800; left: 0; margin-right: auto; margin-left: auto;"></canvas>
			<canvas id="grid_canvas_xy" width="768" height="768"
				style="z-index: 1; position:absolute; top:70px; right: 0; left: 800; margin-right: auto; margin-left: auto;"></canvas>
			<canvas id="dots_canvas_xy" width="768" height="768"
				style="z-index: 2; position:absolute; top:70px; right: 0; left: 800; margin-right: auto; margin-left: auto;"></canvas>
		</div>
		<div style="z-index: 3; position: absolute; top:70px; right: 800; left: 0; margin-right: auto; margin-left: auto; width: 768; height: 192; background-color: white;">
			<div style="width: 35%; float: left">
				<table class="table">
					<tr>
						<th class="room">Room</th>
						<th>Occupants</th>
						<th>Available</th>
					</tr>
					<tr>
						<td class="room">1</td>
						<td><canvas id="occ_1" width="120" height="16"></canvas></td>
						<td id="avail_1">Yes</td>
					</tr>
					<tr>
						<td class="room">2</td>
						<td><canvas id="occ_2" width="120" height="16"></canvas></td>
						<td id="avail_2">Yes</td>
					</tr>
					<tr>
						<td class="room">3</td>
						<td><canvas id="occ_3" width="120" height="16"></canvas></td>
						<td id="avail_3">Yes</td>
					</tr>
					<tr>
						<td class="room">4</td>
						<td><canvas id="occ_4" width="120" height="16"></canvas></td>
						<td id="avail_4">Yes</td>
					</tr>
				</table>
			</div>
			<div style="width: 60%; float: right">
				<table class="table">
					<tr>
						<th>User</th>
						<th>Last Seen</th>
					</tr>
					<tr>
						<td><canvas id="user_white" width="30" height="16"></canvas>Mrs. White</td>
						<td id="seen_white">Never Seen</td>
					</tr>
					<tr>
						<td><canvas id="user_yellow" width="30" height="16"></canvas>Colonel Mustard</td>
						<td id="seen_yellow">Never Seen</td>
					</tr>
					<tr>
						<td><canvas id="user_blue" width="30" height="16"></canvas>Mrs. Peacock</td>
						<td id="seen_blue">Never Seen</td>
					</tr>
					<tr>
						<td><canvas id="user_anon" width="30" height="16"></canvas>Anonymous</td>
						<td></td>
					</tr>
				</table>
			</div>
		</div>
	</div>

	<script>
	var LOC_VLC_PID = 'WEgwAGyc9N';
	var socket_loc;

	var PX_SCALE = 8;
	var WIDTH    = 96 * PX_SCALE;
	var HEIGHT   = 96 * PX_SCALE;

	var grid_canvas_yz = document.getElementById('grid_canvas_yz');
	var dots_canvas_yz = document.getElementById('dots_canvas_yz');
	var grid_canvas_xy = document.getElementById('grid_canvas_xy');
	var dots_canvas_xy = document.getElementById('dots_canvas_xy');

	grid_canvas_yz.width  = WIDTH
	dots_canvas_yz.width  = WIDTH
	grid_canvas_yz.height = HEIGHT
	dots_canvas_yz.height = HEIGHT

	grid_canvas_xy.width  = WIDTH
	dots_canvas_xy.width  = WIDTH
	grid_canvas_xy.height = HEIGHT
	dots_canvas_xy.height = HEIGHT

	var loc_hist = Array();
	var age_out = 15000; //1000 * 60 * 5;

	function tx(x) {
		return x + WIDTH / 2;
	}

	function ty(y) {
		return -y + HEIGHT / 2;
	}

	function t(pt) {
		return [tx(pt[0]), ty(pt[1])];
	}

	function draw_background_yz() {
		console.log('draw_background_yz');
		var grid_canvas_yz = document.getElementById('grid_canvas_yz');
		var context = grid_canvas_yz.getContext('2d');

		// Start with a blank slate
		context.clearRect(0, 0, WIDTH, HEIGHT);

		// Draw 1" grid
		context.strokeStyle = '#ccc';
		//context.setLineDash([2,3]);
		for (r in _.range(WIDTH/PX_SCALE + 1)) {
			i = r*PX_SCALE;
			context.beginPath();
			context.moveTo(0, i);
			context.lineTo(WIDTH, i);
			context.stroke();

			context.beginPath();
			context.moveTo(i, 0);
			context.lineTo(i, WIDTH);
			context.stroke();
		}

		// Draw 1' grid (masking tape lines)
		context.strokeStyle = "#000";
		for (r in _.range(0, 5)) {
			r = parseInt(r);
			i = (r+2)*12*PX_SCALE;
			draw_line(context, [i, HEIGHT], [i, HEIGHT-2*PX_SCALE]);
		}

		// Draw 1' height markers
		var orig_font = context.font;
		context.font = "bold 11px sans-serif";
		context.strokeStyle = "#444";
		context.setLineDash([PX_SCALE/2])
		for (r in _.range(1, 8)) {
			r = parseInt(r);
			i = (r+1)*12*PX_SCALE;
			draw_line(context, [0, i], [HEIGHT, i]);
			if ((6-r+1) == 1) {
				context.fillText((6-r+1) + ' foot', PX_SCALE, i-PX_SCALE);
			} else {
				context.fillText((6-r+1) + ' feet', PX_SCALE, i-PX_SCALE);
			}
		}
		context.setLineDash([0])
		context.font = orig_font;

		// Draw orientation marker
		context.strokeStyle = "#00f";
		context.fillStyle = '#00f';
		context.textBaseline = "middle";

		draw_arrow(context, [PX_SCALE*1, HEIGHT-PX_SCALE*1], [PX_SCALE*4, HEIGHT-PX_SCALE*1]);
		draw_arrow(context, [PX_SCALE*1, HEIGHT-PX_SCALE*1], [PX_SCALE*1, HEIGHT-PX_SCALE*4]);
		context.fillText('+x', PX_SCALE*5, HEIGHT-PX_SCALE*1);
		context.textAlign = 'center';
		context.fillText('+z', PX_SCALE*1, HEIGHT-PX_SCALE*5.5);
		context.textAlign = 'left';

		// Draw 1" scale marker
		context.strokeStyle = "#f00";
		context.fillStyle = '#f00';
		context.textBaseline = "middle";

		draw_line(context, [PX_SCALE*7, HEIGHT-PX_SCALE], [PX_SCALE*8, HEIGHT-PX_SCALE]);
		draw_line(context, [PX_SCALE*7, HEIGHT-(PX_SCALE+PX_SCALE/3)], [PX_SCALE*7, HEIGHT-(PX_SCALE-PX_SCALE/3)]);
		draw_line(context, [PX_SCALE*8, HEIGHT-(PX_SCALE+PX_SCALE/3)], [PX_SCALE*8, HEIGHT-(PX_SCALE-PX_SCALE/3)]);
		var orig_font = context.font;
		context.font = "bold 11px sans-serif";
		context.fillText('1 inch', PX_SCALE*9, HEIGHT-PX_SCALE);
		context.font = orig_font;

		// Draw Transmitter Box
		function draw_square(context, center, radius) {
			for (var off=-radius; off<=radius; off += (2*radius)) {
				context.beginPath();
				context.moveTo(center[0]+off, center[1]+off);
				context.lineTo(center[0]-off, center[1]+off);
				context.stroke();
				context.beginPath();
				context.moveTo(center[0]+off, center[1]+off);
				context.lineTo(center[0]+off, center[1]-off);
				context.stroke();
			}
		}

		// Draw Transmitters
		context.strokeStyle = "#00f";

		context.beginPath();
		context.arc(tx(-2*PX_SCALE), HEIGHT+5, 15, 0, 2 * Math.PI, false);
		context.stroke();

		context.beginPath();
		context.arc(tx(-13.25*PX_SCALE), HEIGHT+5, 15, 0, 2 * Math.PI, false);
		context.stroke();

		context.beginPath();
		context.arc(tx(13*PX_SCALE), HEIGHT+5, 15, 0, 2 * Math.PI, false);
		context.stroke();

		context.beginPath();
		context.arc(tx(-12.75*PX_SCALE), HEIGHT+5, 15, 0, 2 * Math.PI, false);
		context.stroke();

		context.beginPath();
		context.arc(tx(11.25*PX_SCALE), HEIGHT+5, 15, 0, 2 * Math.PI, false);
		context.stroke();
	}

	function draw_background_xy() {
		console.log('draw_background_xy');
		var grid_canvas_xy = document.getElementById('grid_canvas_xy');
		var context = grid_canvas_xy.getContext('2d');

		// Start with a blank slate
		context.clearRect(0, 0, WIDTH, HEIGHT);

		// Draw 1" grid
		context.strokeStyle = '#ccc';
		//context.setLineDash([2,3]);
		for (r in _.range(WIDTH/PX_SCALE + 1)) {
			i = r*PX_SCALE;
			context.beginPath();
			context.moveTo(0, i);
			context.lineTo(WIDTH, i);
			context.stroke();

			context.beginPath();
			context.moveTo(i, 0);
			context.lineTo(i, WIDTH);
			context.stroke();
		}

		// Draw 1' grid (masking tape lines)
		context.strokeStyle = "#000";
		for (r in _.range(0, 5)) {
			r = parseInt(r);
			i = (r+2)*12*PX_SCALE;
			draw_line(context, [2*12*PX_SCALE, i], [6*12*PX_SCALE, i]);
			draw_line(context, [i, 2*12*PX_SCALE], [i, 6*12*PX_SCALE]);
		}

		// Draw orientation marker
		context.strokeStyle = "#00f";
		context.fillStyle = '#00f';
		context.textBaseline = "middle";

		draw_arrow(context, [PX_SCALE*1, HEIGHT-PX_SCALE*1], [PX_SCALE*4, HEIGHT-PX_SCALE*1]);
		draw_arrow(context, [PX_SCALE*1, HEIGHT-PX_SCALE*1], [PX_SCALE*1, HEIGHT-PX_SCALE*4]);
		context.fillText('+x', PX_SCALE*5, HEIGHT-PX_SCALE*1);
		context.textAlign = 'center';
		context.fillText('+y', PX_SCALE*1, HEIGHT-PX_SCALE*5.5);
		context.textAlign = 'left';

		// Draw 1" scale marker
		context.strokeStyle = "#f00";
		context.fillStyle = '#f00';
		context.textBaseline = "middle";

		draw_line(context, [PX_SCALE*7, HEIGHT-PX_SCALE], [PX_SCALE*8, HEIGHT-PX_SCALE]);
		draw_line(context, [PX_SCALE*7, HEIGHT-(PX_SCALE+PX_SCALE/3)], [PX_SCALE*7, HEIGHT-(PX_SCALE-PX_SCALE/3)]);
		draw_line(context, [PX_SCALE*8, HEIGHT-(PX_SCALE+PX_SCALE/3)], [PX_SCALE*8, HEIGHT-(PX_SCALE-PX_SCALE/3)]);
		var orig_font = context.font;
		context.font = "bold 11px sans-serif";
		context.fillText('1 inch', PX_SCALE*9, HEIGHT-PX_SCALE);
		context.font = orig_font;

		// Draw Transmitter Box
		function draw_square(context, center, radius) {
			for (var off=-radius; off<=radius; off += (2*radius)) {
				context.beginPath();
				context.moveTo(center[0]+off, center[1]+off);
				context.lineTo(center[0]-off, center[1]+off);
				context.stroke();
				context.beginPath();
				context.moveTo(center[0]+off, center[1]+off);
				context.lineTo(center[0]+off, center[1]-off);
				context.stroke();
			}
		}

		// Draw Transmitters
		context.strokeStyle = "#00f";

		context.beginPath();
		context.arc(tx(-2*PX_SCALE), ty(-2*PX_SCALE), 15, 0, 2 * Math.PI, false);
		context.stroke();

		context.beginPath();
		context.arc(tx(-13.25*PX_SCALE), ty(11.25*PX_SCALE), 15, 0, 2 * Math.PI, false);
		context.stroke();

		context.beginPath();
		context.arc(tx(13*PX_SCALE), ty(13.5*PX_SCALE), 15, 0, 2 * Math.PI, false);
		context.stroke();

		context.beginPath();
		context.arc(tx(-12.75*PX_SCALE), ty(-13.5*PX_SCALE), 15, 0, 2 * Math.PI, false);
		context.stroke();

		context.beginPath();
		context.arc(tx(11.25*PX_SCALE), ty(-13.5*PX_SCALE), 15, 0, 2 * Math.PI, false);
		context.stroke();


		// Draw room labels
		var orig_font = context.font;
		context.font = "bold 40px sans-serif";
		context.fillStyle = '#555';
		context.fillText('Room 1', PX_SCALE*6, PX_SCALE*6);
		context.fillText('Room 2', WIDTH-PX_SCALE*24, PX_SCALE*6);
		context.fillText('Room 3', PX_SCALE*6, HEIGHT-PX_SCALE*6);
		context.fillText('Room 4', WIDTH-PX_SCALE*24, HEIGHT-PX_SCALE*6);
		context.font = orig_font;

		context.strokeStyle = "#555";
		context.setLineDash([5]);
		context.lineWidth = 3;
		draw_line(context, [0, HEIGHT/2], [WIDTH, HEIGHT/2]);
		draw_line(context, [WIDTH/2, 0], [WIDTH/2, HEIGHT]);
	}

	function draw_user_dots () {
		console.log('draw_user_dots');
		var canvas_yellow = document.getElementById('user_yellow');
		var ctx_yellow = canvas_yellow.getContext('2d');
		ctx_yellow.fillStyle = get_demo_fill_color('Colonel Mustard');
		ctx_yellow.strokeStyle = get_demo_color('Colonel Mustard');
		ctx_yellow.arc(10, 10, 5, 0, 2 * Math.PI, false);
		ctx_yellow.fill();
		ctx_yellow.lineWidth = 2;
		ctx_yellow.stroke();

		var canvas_white = document.getElementById('user_white');
		var ctx_white = canvas_white.getContext('2d');
		ctx_white.fillStyle = get_demo_fill_color('Mrs. White');
		ctx_white.strokeStyle = get_demo_color('Mrs. White');
		ctx_white.arc(10, 10, 5, 0, 2 * Math.PI, false);
		ctx_white.fill();
		ctx_white.lineWidth = 2;
		ctx_white.stroke();

		var canvas_blue = document.getElementById('user_blue');
		var ctx_blue = canvas_blue.getContext('2d');
		ctx_blue.fillStyle = get_demo_fill_color('Mrs. Peacock');
		ctx_blue.strokeStyle = get_demo_color('Mrs. Peacock');
		ctx_blue.arc(10, 10, 5, 0, 2 * Math.PI, false);
		ctx_blue.fill();
		ctx_blue.lineWidth = 2;
		ctx_blue.stroke();

		var canvas_anon = document.getElementById('user_anon');
		var ctx_anon = canvas_anon.getContext('2d');
		ctx_anon.fillStyle = get_demo_fill_color('Anonymous');
		ctx_anon.strokeStyle = get_demo_color('Anonymous');
		ctx_anon.arc(10, 10, 5, 0, 2 * Math.PI, false);
		ctx_anon.fill();
		ctx_anon.lineWidth = 2;
		ctx_anon.stroke();
	}

	draw_background_yz();
	draw_background_xy();
	draw_user_dots();

	function draw_loc_yz(yz_ctx, loc, rot, age, user) {
		var x = ((loc[0] / 2.54) * PX_SCALE) + WIDTH/2
		var y = ((loc[1] / 2.54) * PX_SCALE) + HEIGHT/2
		var z = ((loc[2] / 2.54) * PX_SCALE)
		yz_ctx.beginPath();
		yz_ctx.arc(x, HEIGHT-z, 5, 0, 2 * Math.PI, false);

		yz_ctx.globalAlpha = Math.max(0, 1-(age / age_out));
		yz_ctx.fillStyle = get_demo_fill_color(user); //'#faa';
		yz_ctx.strokeStyle = get_demo_color(user); //'#f44' //"#f66";
		yz_ctx.fill();
		yz_ctx.lineWidth = 2;
		yz_ctx.stroke();
	}

	function draw_loc_xy(xy_ctx, loc, rot, age, user) {
		var x = tx((loc[0] / 2.54) * PX_SCALE)
		var y = ty((loc[1] / 2.54) * PX_SCALE)
		var z = loc[2];
		xy_ctx.beginPath();
		//console.log('Drawing loc at (' + x + ',' + y + ')');
		xy_ctx.arc(x, y, 5, 0, 2 * Math.PI, false);

		xy_ctx.globalAlpha = Math.max(0, 1-(age / age_out));
		//console.log("alpha: " + xy_ctx.globalAlpha);
		xy_ctx.fillStyle = get_demo_fill_color(user); //'#faa';
		xy_ctx.strokeStyle = get_demo_color(user); //'#f44' //"#f66";
		xy_ctx.fill();
		xy_ctx.lineWidth = 2;
		xy_ctx.stroke();

		xy_ctx.strokeStyle = get_demo_color(user); //'#00f' //"#f66";
		xy_ctx.lineWidth = 1.5;
		//xy_ctx.beginPath();
		//xy_ctx.moveTo(x, y)
		//console.log(rot);
		//var x_rot = rot[0][0] * 30;
		//var y_rot = rot[0][1] * 30;
		//console.log('x_rot ' + x_rot + ' y_rot ' + y_rot);
		//xy_ctx.lineTo(x-x_rot, y+y_rot)
		var x_rot = -rot[0][0] * 30;
		var y_rot = -rot[0][1] * 30;
		draw_arrow(xy_ctx, [x,y], [x+x_rot, y+y_rot]);
	}

	function draw_loc(yz_ctx, xy_ctx, loc, rot, age, user) {
		draw_loc_yz(yz_ctx, loc, rot, age, user);
		draw_loc_xy(xy_ctx, loc, rot, age, user);
	}

	function draw_all_locs() {
		var dots_ctx_yz = dots_canvas_yz.getContext('2d');
		dots_ctx_yz.clearRect(0, 0, WIDTH, HEIGHT);

		var dots_ctx_xy = dots_canvas_xy.getContext('2d');
		dots_ctx_xy.clearRect(0, 0, WIDTH, HEIGHT);

		clear_occupants();

		if (loc_hist.length == 0) {
			// Hack: Make everything available when we know nothing
			$("#avail_1").text("Yes");
			$("#avail_2").text("Yes");
			$("#avail_3").text("Yes");
			$("#avail_4").text("Yes");
			return;
		}

		while ((loc_hist[0]['display_rx_time'] + age_out) < Date.now()) {
			//console.log('Aged out entry (now: ' + Date.now() + ' disp_rx_time: ' + loc_hist[0]['display_rx_time'] + ')');
			loc_hist.shift();
			if (loc_hist.length == 0) { 
				// Hack: Make everything available when we know nothing
				$("#avail_1").text("Yes");
				$("#avail_2").text("Yes");
				$("#avail_3").text("Yes");
				$("#avail_4").text("Yes");
				return;
			}
		}

		// Record the last seen place for all occupants here for room occupancy
		var last_room = {};
		var room_cnt = {1: 0, 2: 0, 3: 0, 4: 0};
		var room_maybe = {1: false, 2: false, 3: false, 4: false};

		for (var i=0; i < loc_hist.length; i++) {
			var loc = loc_hist[i]['rx_location'];
			var rot = loc_hist[i]['rx_rotation'];
			var age = Math.max(1, Date.now() - loc_hist[i]['display_rx_time']);
			draw_loc(dots_ctx_yz, dots_ctx_xy, loc, rot, age, loc_hist[i]['user']);

			last_room[loc_hist[i]['phone_ip']] = loc_hist[i];
		}

		for (var phone_ip in last_room) {
			var room = which_room(last_room[phone_ip]);
			var age = Math.max(1, Date.now() - last_room[phone_ip]['display_rx_time']);
			if (age < (age_out / 2)) {
				draw_occupant_dot('occ_' + room, room_cnt[room], last_room[phone_ip]['user']);
				room_cnt[room] += 1;
			} else {
				room_maybe[room] = true;
			}
		}

		for (var room in [1,2,3,4]) {
			if (room_cnt[room] > 0) {
				$('#avail_'+room).text("No");
			} else if (room_maybe[room]) {
				$('#avail_'+room).text("Maybe");
			} else {
				$('#avail_'+room).text("Yes");
			}
		}
	}

	/* Wrapper around generic demo color-picker that picks off known names and
		 special-cases them. If users supply their own names, fall back to the
		 automatic color selection */
	function get_demo_color (user) {
		if (user == "Mrs. White") {
			return "#000";
		} else if (user == "Colonel Mustard") {
			return "#E6B800";
		} else if (user == "Mrs. Peacock") {
			return "#33CCFF";
		} else if (user == "Anonymous") {
			return "#33CC33";
		} else {
			return get_color(user);
		}
	}
	function get_demo_fill_color (user) {
		if (user == "Mrs. White") {
			return "#fff";
		} else if (user == "Colonel Mustard") {
			return "#F5E399";
		} else if (user == "Mrs. Peacock") {
			return "#ADEBFF";
		} else if (user == "Anonymous") {
			return "#ADEBAD";
		} else {
			return get_color(user);
		}
	}

	function which_room (data) {
		if (data['rx_location'][0] > 0) {
			// right side
			if (data['rx_location'][1] > 0) {
				return 2;
			} else {
				return 4;
			}
		} else {
			// left side
			if (data['rx_location'][1] > 0) {
				return 1;
			} else {
				return 3;
			}
		}
	}

	function clear_occupants_from (room) {
		var canvas = document.getElementById(room);
		var ctx = canvas.getContext('2d');
		ctx.clearRect(0, 0, 120, 16);
	}

	function clear_occupants () {
		clear_occupants_from('occ_1');
		clear_occupants_from('occ_2');
		clear_occupants_from('occ_3');
		clear_occupants_from('occ_4');
	}

	function draw_occupant_dot (room, cnt, user) {
		var canvas = document.getElementById(room);
		var ctx = canvas.getContext('2d');
		ctx.fillStyle = get_demo_fill_color(user);
		ctx.strokeStyle = get_demo_color(user);
		ctx.beginPath();
		ctx.arc(10+20*cnt, 10, 5, 0, 2 * Math.PI, false);
		ctx.fill();
		ctx.lineWidth = 2;
		ctx.stroke();
	}

	var updater_interval = setInterval(function(){draw_all_locs()}, 500);

	onload = function() {
		socket_loc = io.connect('inductor.eecs.umich.edu:8082/stream');
		socket_loc.on('connect', function (data) {
			socket_loc.emit('query', {'profile_id': LOC_VLC_PID});
		});

		socket_loc.on('data', function (data) {
			data['display_rx_time'] = Date.now();

			var options = {
				hour: 'numeric', minute: 'numeric', second: 'numeric',
				timeZone: 'America/Los_Angeles',
				timeZoneName: 'short',
			};
			var pretty_time = new Intl.DateTimeFormat('en-US', options).format(data['display_rx_time']);
			/* Update 'Last Seen' only when a new entry first comes in */
			if (data['user'] == 'Mrs. White') {
				$("#seen_white").text(pretty_time + ' in Room ' + which_room(data));
			} else if (data['user'] == 'Colonel Mustard') {
				$("#seen_yellow").text(pretty_time + ' in Room ' + which_room(data));
			} else if (data['user'] == 'Mrs. Peacock') {
				$("#seen_blue").text(pretty_time + ' in Room ' + which_room(data));
			}

			console.log(data);
			loc_hist.push(data);
		});
	}

	</script>

{% endblock %}
