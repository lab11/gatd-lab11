{#Name: VLC Localization#}
{#Desc: Real-time localization using visible light on the in-lab testbed.#}

{% extends "base.jinja" %}

{% block includes %}
<script src="/js/gatd_canvas.js"></script>
{% endblock %}

{% block title %}
VLC Location - Simple Grid
{% endblock %}

{% block page_title %}
VLC Location
{% endblock %}

{% block body %}
	<div id="body">
		<div class="container">
			<div class="row">
				<div class="col-lg-2">
					<input type="checkbox" checked="checked" id="cb_floor_pegboard">Show Floor Pegboard</input>
				</div>
				<div class="col-lg-2">
					<input type="checkbox" checked="checked" id="cb_ceil_pegboard">Show Ceiling Pegboard</input>
				</div>
				<div class="col-lg-2">
					<input type="checkbox" checked="checked" id="cb_train_track">Show Train Tracks</input>
				</div>
				<div class="col-lg-4">
					<button onclick="onclick_replay_train()" class="btn btn-default">Replay Train Experiment (5x speed)</input>
				</div>
			</div>
		</div>
		<div>
			<canvas id="grid_canvas" width="900" height="900"
				style="z-index: 1; position:absolute; top:150px; right: 0; left: 0; margin-right: auto; margin-left: auto;"></canvas>
			<canvas id="dots_canvas" width="900" height="900"
				style="z-index: 2; position:absolute; top:150px; right: 0; left: 0; margin-right: auto; margin-left: auto;"></canvas>
		</div>
		<!--
		<div id="key" class="box_shadow key">
			<table id="key_table">
				<thead><tr>
						<th>Index</th>
						<th>ID</th>
						<th>Description</th>
						<th>Location</th>
						<th>Time</th>
				</tr></thead>
				<tbody id="key_table_tbody"></tbody>
			</table>
		</div>
		-->
	</div>

	<script>
	var LOC_VLC_PID = 'WEgwAGyc9N';
	var socket_loc;

	var WIDTH    = 1600;
	var HEIGHT   = 1600;
	var PX_SCALE = 10;

	var grid_canvas = document.getElementById('grid_canvas');
	var dots_canvas = document.getElementById('dots_canvas');

	grid_canvas.width  = WIDTH
	dots_canvas.width  = WIDTH
	grid_canvas.height = HEIGHT
	dots_canvas.height = HEIGHT

	var loc_hist = Array();
	var age_out = 15000; //1000 * 60 * 5;

	function tx(x) {
		return x + WIDTH / 2;
	}

	function ty(y) {
		return y + 300;
	}

	function t(pt) {
		return [tx(pt[0]), ty(pt[1])];
	}

	function draw_background() {
		var grid_canvas = document.getElementById('grid_canvas');
		var context = grid_canvas.getContext('2d');

		// Start with a blank slate
		context.clearRect(0, 0, WIDTH, HEIGHT);

		// Draw 1" grid
		context.strokeStyle = '#ccc';
		//context.setLineDash([2,3]);
		for (r in _.range(WIDTH/PX_SCALE + 1)) {
			i = r*PX_SCALE;
			context.beginPath();
			context.moveTo(0, i);
			context.lineTo(WIDTH, i);
			context.stroke();

			context.beginPath();
			context.moveTo(i, 0);
			context.lineTo(i, WIDTH);
			context.stroke();
		}

		// Draw orientation marker
		context.strokeStyle = "#00f";
		context.fillStyle = '#00f';
		context.textBaseline = "middle";

		draw_arrow(context, [PX_SCALE*1, PX_SCALE*1], [PX_SCALE*4, PX_SCALE*1]);
		draw_arrow(context, [PX_SCALE*1, PX_SCALE*1], [PX_SCALE*1, PX_SCALE*4]);
		context.fillText('+x', PX_SCALE*5, PX_SCALE*1);
		context.textAlign = 'center';
		context.fillText('+y', PX_SCALE*1, PX_SCALE*5);
		context.textAlign = 'left';

		// Draw 1" scale marker
		context.strokeStyle = "#f00";
		context.fillStyle = '#f00';
		context.textBaseline = "middle";

		draw_line(context, [PX_SCALE*7, PX_SCALE], [PX_SCALE*8, PX_SCALE]);
		draw_line(context, [PX_SCALE*7, PX_SCALE+PX_SCALE/3], [PX_SCALE*7,   PX_SCALE-PX_SCALE/3]);
		draw_line(context, [PX_SCALE*8, PX_SCALE+PX_SCALE/3], [PX_SCALE*8, PX_SCALE-PX_SCALE/3]);
		var orig_font = context.font;
		context.font = "bold 11px sans-serif";
		context.fillText('1 inch', PX_SCALE*9, PX_SCALE);
		context.font = orig_font;

		// Draw Door
		var hinge = [200+220+320, -200-30]
		context.strokeStyle = '#000';
		context.lineWidth = 2;
		draw_line(context, t(hinge), t([hinge[0], hinge[1]+320]));
		context.lineWidth = 1;
		context.strokeStyle = '#666';
		context.beginPath();
		context.arc(tx(hinge[0]), ty(hinge[1]), 320, 0.5*Math.PI, Math.PI);
		context.stroke();

		// Draw Wall
		context.strokeStyle = '#000';
		context.lineWidth = 3;
		draw_line(context, t([-WIDTH/2, -200-30]), t([hinge[0]-320, -200-30]));
		draw_line(context, t([hinge[0], -200-30]), t([WIDTH/2, -200-30]));
		context.lineWidth = 1;

		//draw_line(context, [0, 0], [100, 200]);
		//draw_line(context, t([0, 0]), t([100, 200]));

		// Draw Transmitter Box
		function draw_square(context, center, radius) {
			for (var off=-radius; off<=radius; off += (2*radius)) {
				context.beginPath();
				context.moveTo(center[0]+off, center[1]+off);
				context.lineTo(center[0]-off, center[1]+off);
				context.stroke();
				context.beginPath();
				context.moveTo(center[0]+off, center[1]+off);
				context.lineTo(center[0]+off, center[1]-off);
				context.stroke();
			}
		}

		var ceiling_pegboard_radius = 160;
		var floor_pegboard_radius = 200;

		if (document.getElementById("cb_floor_pegboard").checked) {
			context.strokeStyle = '#000';
			draw_square(context, t([0, 0]), floor_pegboard_radius);
		}

		if (document.getElementById("cb_ceil_pegboard").checked) {
			context.strokeStyle = '#0dd';
			draw_square(context, t([0, 0]), ceiling_pegboard_radius);
		}

		// Draw Transmitters
		context.strokeStyle = "#00f";

		context.beginPath();
		context.arc(tx(0), ty(0), 15, 0, 2 * Math.PI, false);
		context.stroke();
		for (var x_off=-150; x_off<=150; x_off += 300) {
			for (var y_off=-140; y_off<=140; y_off += 280) {
				context.beginPath();
				context.arc(tx(x_off), ty(y_off), 14, 0, 2 * Math.PI, false);
				context.stroke();
			}
		}

		// Draw train track
		if (document.getElementById("cb_train_track").checked) {
			context.strokeStyle = "#080";

			context.beginPath();
			context.arc(tx(-43.5), ty(0), 117.5, Math.PI*.5, 1.5*Math.PI, false);
			context.stroke();
			context.beginPath();
			context.arc(tx(43.5), ty(0), 117.5, Math.PI*1.5, .5*Math.PI, false);
			context.stroke();

			context.beginPath();
			context.moveTo(tx(-43.5), ty(117.5));
			context.lineTo(tx(43.5), ty(117.5));
			context.stroke()
			context.beginPath();
			context.moveTo(tx(-43.5), ty(-117.5));
			context.lineTo(tx(43.5), ty(-117.5));
			context.stroke();
		}
	}

	draw_background();

	function draw_loc(context, loc, rot, age) {
		var x = tx((loc[0] / 2.54) * PX_SCALE)
		var y = ty((loc[1] / 2.54) * PX_SCALE)
		var z = loc[2];
		context.beginPath();
		//console.log('Drawing loc at (' + x + ',' + y + ')');
		context.arc(x, y, 5, 0, 2 * Math.PI, false);

		context.globalAlpha = Math.max(0, 1-(age / age_out));
		//console.log("alpha: " + context.globalAlpha);
		context.fillStyle = '#faa';
		context.strokeStyle = '#f44' //"#f66";
		context.fill();
		context.lineWidth = 2;
		context.stroke();

		context.strokeStyle = '#00f' //"#f66";
		context.lineWidth = 1.5;
		//context.beginPath();
		//context.moveTo(x, y)
		//console.log(rot);
		//var x_rot = rot[0][0] * 30;
		//var y_rot = rot[0][1] * 30;
		//console.log('x_rot ' + x_rot + ' y_rot ' + y_rot);
		//context.lineTo(x-x_rot, y+y_rot)
		var x_rot = rot[0][0] * 30;
		var y_rot = -rot[0][1] * 30;
		draw_arrow(context, [x,y], [x+x_rot, y+y_rot]);
	}

	function draw_all_locs() {
		var dots_ctx = dots_canvas.getContext('2d');
		dots_ctx.clearRect(0, 0, WIDTH, HEIGHT);
		if (loc_hist.length == 0) return;

		while ((loc_hist[0]['display_rx_time'] + age_out) < Date.now()) {
			console.log('Aged out entry (now: ' + Date.now() + ' disp_rx_time: ' + loc_hist[0]['display_rx_time'] + ')');
			loc_hist.shift();
			if (loc_hist.length == 0) return;
		}
		for (var i=0; i < loc_hist.length; i++) {
			var loc = loc_hist[i]['rx_location'];
			var rot = loc_hist[i]['rx_rotation'];
			var age = Math.max(1, Date.now() - loc_hist[i]['display_rx_time']);
			draw_loc(dots_ctx, loc, rot, age);
		}
	}

	var updater_interval = setInterval(function(){draw_all_locs()}, 500);

	onload = function() {
		socket_loc = io.connect('inductor.eecs.umich.edu:8082/stream');
		socket_loc.on('connect', function (data) {
			socket_loc.emit('query', {'profile_id': LOC_VLC_PID});
		});

		socket_loc.on('data', function (data) {
			data['display_rx_time'] = Date.now();
			console.log(data);
			loc_hist.push(data);
		});
	}

	function on_grid_cb_click() {
		draw_background();
	}

	function onclick_replay_train() {
		console.log('onclick_replay_train clicked');
		replay_sock = io.connect('inductor.eecs.umich.edu:8084/stream');
		replay_sock.on('connect', function (data) {
			//console.log('emitting replay query for ' + TRAIN_START_TIME_EDT_MS + ' to ' +
			//	TRAIN_END_TIME_EDT_MS)
			replay_sock.emit('query',
				{'profile_id': LOC_VLC_PID,
				//'time': {'$gt': 1394722810000, '$lt': 1394723067000},
				'time': {'$gt': 1394722889000, '$lt': 1394723066235},
				'_speedup': 5.0,
				}
			);
			console.log('query emitted');
				//'time': {'$gt': 1395178041000}, // known data point at 1395178041086
				// PAT 11 AM 'time': {'$gt': 1394722800000},
				// BRAD 'time': {'$gt': 1394723150000},
				//'time': {'$gt': TRAIN_START_TIME_EDT_MS, '$lt': TRAIN_END_TIME_EDT_MS},
		});

		replay_sock.on('data', function (data) {
			data['display_rx_time'] = Date.now();
			console.log('replay data point: ' + data + ' time: ' + data['time']);
			loc_hist.push(data);
		});
	}

	$('#cb_floor_pegboard').click(on_grid_cb_click);
	$('#cb_ceil_pegboard').click(on_grid_cb_click);
	$('#cb_train_track').click(on_grid_cb_click);
	</script>

{% endblock %}
